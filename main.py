# -*- coding: utf-8 -*-
import telebot
import time
import random
import os
import json





bot = telebot.TeleBot(token)
#users_inf = {}
#coord = {}
phrazes = [
    "–Ø–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –≤ –ú–æ—Å–∫–≤–µ –±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–∫–∏ —Å –≥–æ–ª–æ–¥–Ω—ã–º–∏ \
–≤–æ–¥–∏—Ç–µ–ª—è–º–∏. –ò–º–µ–µ—Ç —Å–º—ã—Å–ª –ø–æ—Å–ª–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Ç—É–¥–∞.\n*–ê–¥—Ä–µ—Å*: %s.\
\n*–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã*: %f %f\n*–ù–∞–≤–∏–∞–¥—Ä–µ—Å*: %s", "–í–∞—à –æ—Ç–¥–µ–ª \
–∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –ø—Ä–æ–≤–µ–ª –∫—Ä–æ–ø–æ—Ç–ª–∏–≤—É—é —Ä–∞–±–æ—Ç—É –∏ –ø—Ä–∏—à–µ–ª –∫ –≤—ã–≤–æ–¥—É, \
—á—Ç–æ —Å–∞–º–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è %s.\
\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: %f %f\n*–ù–∞–≤–∏–∞–¥—Ä–µ—Å*: %s"]
phraze = " –≤ \
–ú–æ—Å–∫–≤–µ –∏ –¥–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç! –°—Ä–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å–æ —Å–≤–µ–∂–∏–º–∏ \
–ø–ª—é—à–∫–∞–º–∏ —Ç—É–¥–∞.\n*–ê–¥—Ä–µ—Å*: %s.\n*–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã*: %f %f\n*–ù–∞–≤–∏–∞–¥—Ä–µ—Å*: %s"
phrazes.append("–ù–∞—Ç–∞—à–∞ –ö–æ—Ä–æ–ª–µ–≤–∞"+phraze)
phrazes.append("–ë—Ä–∏—Ç–Ω–∏ –°–ø–∏—Ä—Å"+phraze)
phrazes.append("–õ–µ–ø—Å"+phraze)

navi_addresses = ['310985', '109019', '210131', '210975', '117504', '711502', '141052', '151050', '212207', '421250']

f = open('info_dump.txt', 'r')
r = f.read()
users_inf = json.loads(r)
f.close()

f = open('coord_dump.txt', 'r')
r = f.read()
coord = json.loads(r)
f.close()




@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, """–í —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã –±–∏–∑–Ω–µ—Å–º–µ–Ω, \
–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–µ—Ç –ø–ª—é—à–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ. –ò—â–∏—Ç–µ –º–µ—Å—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–∫–æ–ø–ª–µ–Ω–∏–µ–º –≥–æ–ª–æ–¥–Ω—ã—Ö –ª—é–¥–µ–π \
(–≤ –ø—Ä–æ–±–∫–∞—Ö, –Ω–∞ –≥—É–ª—è–Ω–∏—è—Ö) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—É–¥–∞ –≤–∞—à–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å–æ —Å–≤–µ–∂–∏–º–∏ –ø–ª—é—à–∫–∞–º–∏, \
–∞ –≤ —ç—Ç–æ–º –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–¥—Ä–µ—Å–æ–≤ - *–ù–∞–≤–∏–∞–¥—Ä–µ—Å–∞*.
–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ:\nhttps://about.naviaddress.com/
–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –ø–æ—á—Ç—É:\nmp@naviworldcorp.com""", parse_mode="Markdown")
    users_inf[str(message.chat.id)] = {}
    users_inf[str(message.chat.id)]['prestige'] = 0
    users_inf[str(message.chat.id)]['money'] = 0
    users_inf[str(message.chat.id)]['last'] = list()
    users_inf[str(message.chat.id)]['workers'] = 3
    users_inf[str(message.chat.id)]['last_action'] = time.time()
    print(users_inf)
    base_menu(message.chat.id)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        check(message.chat.id)
        users_inf[str(message.chat.id)]['last_action'] = time.time()
        print(users_inf)
        log_f = open('log_file.txt', 'a')
        log_f.write(time.ctime()+'\n')
        log_f.write(json.dumps(users_inf))
        log_f.write('\n')
        if message.text == '–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞üè¢':
            bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–µ—Å—Ç–∏–∂ = %d\n–î–µ–Ω—å–≥–∏ = %d\n–°–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ = %d" %
                             (users_inf[str(message.chat.id)]['prestige'],
                              users_inf[str(message.chat.id)]['money'],
                              users_inf[str(message.chat.id)]['workers'])
                             )
            resources_menu(message.chat.id)
        elif message.text == '–†–∞–±–æ—Ç–∞üí∞':
            random.shuffle(phrazes)
            random.shuffle(navi_addresses)
            bot.send_message(message.chat.id, phrazes[0] %
                             (coord[navi_addresses[0]]['address'], coord[navi_addresses[0]]['lon'],
                              coord[navi_addresses[0]]['lat'], navi_addresses[0]), parse_mode="Markdown")
            cur_dir = os.getcwd()
            pic = cur_dir + '/picture/' + coord[navi_addresses[0]]['picture'] + '.png'
            img = open(pic, 'rb')
            bot.send_chat_action(message.chat.id, 'upload_photo')
            bot.send_photo(message.chat.id, img)
            management_menu(message.chat.id)
        elif message.text == '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞üìà':
            random.shuffle(phrazes)
            random.shuffle(navi_addresses)
            bot.send_message(message.chat.id, phrazes[0] %
                             (coord[navi_addresses[0]]['address'],
                              coord[navi_addresses[0]]['lon'],
                              coord[navi_addresses[0]]['lat'],
                              navi_addresses[0]),
                             parse_mode="Markdown"
                             )
            cur_dir = os.getcwd()
            pic = cur_dir + '/picture/' + coord[navi_addresses[0]]['picture'] + '.png'
            img = open(pic, 'rb')
            bot.send_chat_action(message.chat.id, 'upload_photo')
            bot.send_photo(message.chat.id, img)
            management_menu(message.chat.id)
        elif message.text == '–ü–æ–º–æ—â—åüéì':
            bot.send_message(message.chat.id, """–í —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã –±–∏–∑–Ω–µ—Å–º–µ–Ω, \
–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–µ—Ç –ø–ª—é—à–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ. –ò—â–∏—Ç–µ –º–µ—Å—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–∫–æ–ø–ª–µ–Ω–∏–µ–º –≥–æ–ª–æ–¥–Ω—ã—Ö –ª—é–¥–µ–π \
(–≤ –ø—Ä–æ–±–∫–∞—Ö, –Ω–∞ –≥—É–ª—è–Ω–∏—è—Ö) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—É–¥–∞ –≤–∞—à–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å–æ —Å–≤–µ–∂–∏–º–∏ –ø–ª—é—à–∫–∞–º–∏, \
–∞ –≤ —ç—Ç–æ–º –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–¥—Ä–µ—Å–æ–≤ - –ù–∞–≤–∏–∞–¥—Ä–µ—Å–∞.
–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ:\nhttps://about.naviaddress.com/
–í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: mp@naviworldcorp.com""")
            base_menu(message.chat.id)
        elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞üë∑':
            if users_inf[str(message.chat.id)]['workers'] > 0:
                go(message.chat.id)
            else:
                new = users_inf[str(message.chat.id)]['last'][0]
                bot.send_message(message.chat.id, "–í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞\
–∑–∞—Ä–∞–±–æ—Ç–∫–∏. –ë–ª–∏–∂–∞–π—à–∏–π –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ %s" % time.strftime("%H:%M", time.gmtime(new + 10800)))
                management_menu(message.chat.id)
        elif message.text in navi_addresses:
            cur_time = time.time()
            if users_inf[str(message.chat.id)]['workers'] > 0:
                payment = 35
                str_mess = ("–ï–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ –Ω–∞–≤–∏–∞–¥—Ä–µ—Å—É %s, –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –º–µ—Å—Ç–æ –≤—Å–µ–≥–¥–∞"
                            " –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ http://naviaddress.com/7495/")
                str_mess += message.text
                str_mess += "\n–ü—Ä–æ–¥–∞–≤–µ—Ü –≤–µ—Ä–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.\n–í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å 35 –º–æ–Ω–µ—Ç."
                bot.send_message(message.chat.id, str_mess % message.text)
                bot.send_chat_action(message.chat.id, 'find_location')
                bot.send_location(message.chat.id, coord[message.text]['lon'], coord[message.text]['lat'])
                users_inf[str(message.chat.id)]['money'] += payment + users_inf[str(message.chat.id)]['prestige']
                users_inf[str(message.chat.id)]['workers'] -= 1
                users_inf[str(message.chat.id)]['last'].append(cur_time + 1800)
                f = open("check_files/new_"+str(random.randint(0, 100000000) % 1000)+".txt", 'a')
                f.write(str(message.chat.id)+' ')
                f.write(str(cur_time + 1800)+'\n')
                f.close()
            else:
                new = users_inf[str(id)]['last'][0]
                bot.send_message(message.chat.id, "–í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞\
–∑–∞—Ä–∞–±–æ—Ç–∫–∏. –ë–ª–∏–∂–∞–π—à–∏–π –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ %s" % time.strftime("%H:%M", new))
            management_menu(message.chat.id)
        elif message.text == '–ù–∞–Ω—è—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞üèÉ':
            if users_inf[str(message.chat.id)]['money'] > 500:
                users_inf[str(message.chat.id)]['money'] -= 500
                users_inf[str(message.chat.id)]['workers'] += 1
            else:
                bot.send_message(message.chat.id, ("–ù–æ–≤—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü —Å—Ç–æ–∏—Ç 300 –º–æ–Ω–µ—Ç,"
                                                   " –¥–µ–Ω–µ–≥ –ø–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Çüò¢")
                                 )
            resources_menu(message.chat.id)
        elif message.text == '–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—Éüì∞':
            if users_inf[str(message.chat.id)]['money'] > 200:
                users_inf[str(message.chat.id)]['money'] -= 200
                users_inf[str(message.chat.id)]['prestige'] += 10
            else:
                bot.send_message(message.chat.id, ("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É —Å—Ç–æ–∏—Ç 200 –º–æ–Ω–µ—Ç,"
                                                   " –¥–µ–Ω–µ–≥ –ø–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Çüò¢")
                                 )
            resources_menu(message.chat.id)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚¨Ö':
            base_menu(message.chat.id)
        elif message.text == '–û—Ç—á–µ—Çüìù':
            report(message.chat.id)
            management_menu(message.chat.id)
        elif message.text == '–ë–æ–Ω—É—ÅüéÅ':
            bot.send_message(message.chat.id, "–ü—Ä–æ–¥–∞–≤—Ü—ãüë∑ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ—Å—É—Ä—Å\
 –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –û—Ç–ø—Ä–∞–≤–ª—è—è –∏—Ö –Ω–∞ —Ç–æ—á–∫–∏, –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ –ø–ª—é—à–∫–∏üç© –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏üí∞. –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞\
 –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å. –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")
            base_menu(message.chat.id)
        else:
            bot.send_message(message.chat.id, ("–†–∞–±–æ—Ç–Ω–∏–∫ –≤—ã–µ—Ö–∞–ª –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É,"
                                               " –Ω–æ –ø–æ—Ç–µ—Ä—è–ª—Å—è –ø–æ –ø—É—Ç–∏ –∏ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∏ —Å —á–µ–º!üò¢")
                             )
            management_menu(message.chat.id)
        check_activity()
        log_f.close()
    except:
        pass


def check(chat_id):
    try:
        while len(users_inf[str(chat_id)]['last']) > 0:
            if users_inf[str(chat_id)]['last'][0] <= time.time():
                users_inf[str(chat_id)]['last'].pop(0)
                users_inf[str(chat_id)]['workers'] += 1
                # bot.send_message(id,
                #                  "–†–∞–±–æ—Ç–Ω–∏–∫ –≤–µ—Ä–Ω—É–ª—Å—è —Å —Ç–æ—á–∫–∏ –∏ —Å–Ω–æ–≤–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\
# \n–°–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ = %d\n–ü—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ —Ç–æ—á–∫–∞—Ö = %d" %
#                                 (users_inf[str(id)]['workers'], len(users_inf[str(id)]['last'])))
            else:
                break
    except:
        pass


# def check_workers():
    # pass
    # while True:
    #    real_time = time.time()
    #    for key, element in users_inf.items():


def check_activity():
    real_time = time.time()
    for key, element in users_inf.items():
        if element['last_action'] + 43200 < real_time:
            bot.send_message(int(key), ("–•–µ–π, —Ö–µ–π, —Ö–µ–π! –¢—ã –∑–∞–±—ã–ª –ø—Ä–æ —Å–≤–æ–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."
                                        " –û–Ω–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ –∫—É—á—É –±–∞–±–ª–∞ –∏ –≥–æ—Ç–æ–≤—ã —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!")
                             )
            element['last_action'] = time.time()


# def delay_message(id):
    # while not delay_q.empty():
    #    real_time = time.time()
    #    first_elem = delay_q.get()
    #    while real_time < first_elem[1]:
    #        time.sleep(300)
    #    bot.send_message(int(first_elem[0]), "–ü—Ä–æ–¥–∞–≤–µ—Ü –≤–µ—Ä–Ω—É–ª—Å—è c —Ç–æ—á–∫–∏\n")
    # global delay_num
    # delay_num = 0
    # bot.send_message(int(id), "–ü—Ä–æ–¥–∞–≤–µ—Ü –≤–µ—Ä–Ω—É–ª—Å—è c —Ç–æ—á–∫–∏\n")


def base_menu(chat_id):
    try:
        user_markup = telebot.types.ReplyKeyboardMarkup(True, True)
        first_button = '–†–∞–±–æ—Ç–∞üí∞'
        second_button = '–ü–æ–º–æ—â—åüéì'
        third_button = '–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞üè¢'
        fourth_button = '–ë–æ–Ω—É—ÅüéÅ'
        user_markup.row(first_button, second_button)
        user_markup.row(third_button, fourth_button)
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=user_markup)
    except:
        pass


def management_menu(chat_id):
    try:
        user_markup = telebot.types.ReplyKeyboardMarkup(True, True)
        first_button = '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞üìà'
        second_button = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞üë∑'
        third_button = '–û—Ç—á–µ—Çüìù'
        fourth_button = '–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚¨Ö'
        user_markup.row(first_button, second_button)
        user_markup.row(third_button, fourth_button)
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=user_markup)
    except:
        pass


def resources_menu(chat_id):
    try:
        user_markup = telebot.types.ReplyKeyboardMarkup(True, True)
        first_button = '–ù–∞–Ω—è—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞üèÉ'
        second_button = '–ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—Éüì∞'
        fourth_button = '–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚¨Ö'
        user_markup.row(first_button, second_button)
        user_markup.row(fourth_button)
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=user_markup)
    except:
        pass


def report(user_id):
    if len(users_inf[str(user_id)]['last']):
        bot.send_message(user_id, ("–°–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ = %d\n"
                                   "–ü—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ —Ç–æ—á–∫–∞—Ö = %d\n"
                                   "–î–µ–Ω—å–≥–∏ = %d\n"
                                   "–ü—Ä–æ–¥–∞–≤–µ—Ü –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ %s"
                                   ) %
                         (users_inf[str(user_id)]['workers'],
                          len(users_inf[str(user_id)]['last']),
                          users_inf[str(user_id)]['money'],
                          time.strftime("%H:%M",
                                        time.gmtime(users_inf[str(user_id)]['last'][0] + 10800)
                                        )
                          )
                         )
    else:
        bot.send_message(user_id, ("–°–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ = %d\n"
                                   "–ü—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ —Ç–æ—á–∫–∞—Ö = %d\n"
                                   "–î–µ–Ω—å–≥–∏ = %d\n"
                                   ) %
                         (users_inf[str(user_id)]['workers'],
                          len(users_inf[str(user_id)]['last']),
                          users_inf[str(user_id)]['money']
                          )
                         )


def go(chat_id):
    try:
        bot.send_message(chat_id, ("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—èüìç –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º –¥–ª—è"
                              " –≤–∞—Å –≤–∏–¥–µ: –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –Ω–∞–≤–∏–∞–¥—Ä–µ—Å.")
                         )
    except:
        pass


bot.polling(none_stop=True, interval=1)
